[{"C:\\Users\\16479\\Desktop\\Web Development\\CalculatorV2\\calculator\\src\\index.js":"1","C:\\Users\\16479\\Desktop\\Web Development\\CalculatorV2\\calculator\\src\\App.js":"2","C:\\Users\\16479\\Desktop\\Web Development\\CalculatorV2\\calculator\\src\\components\\calculator\\Calculator.jsx":"3","C:\\Users\\16479\\Desktop\\Web Development\\CalculatorV2\\calculator\\src\\components\\calculator\\btnConfig.js":"4"},{"size":197,"mtime":1682201086617,"results":"5","hashOfConfig":"6"},{"size":198,"mtime":1682201056446,"results":"7","hashOfConfig":"6"},{"size":3403,"mtime":1682200872320,"results":"8","hashOfConfig":"6"},{"size":2025,"mtime":1682201118487,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"109ozvo",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\16479\\Desktop\\Web Development\\CalculatorV2\\calculator\\src\\index.js",[],[],"C:\\Users\\16479\\Desktop\\Web Development\\CalculatorV2\\calculator\\src\\App.js",[],[],"C:\\Users\\16479\\Desktop\\Web Development\\CalculatorV2\\calculator\\src\\components\\calculator\\Calculator.jsx",["23"],[],"import React, { useRef, useEffect, useState } from 'react';\r\n\r\nimport './calculator.css';\r\n\r\nimport { btns, BTN_ACTIONS } from './btnConfig';\r\n\r\nconst Calculator = () => {\r\n\r\n    const btnsRef = useRef(null);\r\n    const expRef = useRef(null);\r\n\r\n    const [expression, setExpression] = useState('');\r\n\r\n    useEffect(() => {\r\n        const btns = Array.from(btnsRef.current.querySelectorAll('button'));\r\n        btns.forEach(e => e.style.height = e.offsetWidth + 'px');\r\n    }, []);\r\n\r\n    const btnClick = (item) => {\r\n        const expDiv = expRef.current;\r\n\r\n        if (item.action === BTN_ACTIONS.THEME) document.body.classList.toggle('dark');\r\n\r\n        if (item.action === BTN_ACTIONS.ADD) {\r\n            addAnimSpan(item.display);\r\n\r\n            const oper = item.display !== 'x' ? item.display : '*';\r\n            setExpression(expression + oper);\r\n        }\r\n\r\n        if (item.action === BTN_ACTIONS.DELETE) {\r\n            expDiv.parentNode.querySelector('div:last-child').innerHTML = '';\r\n            expDiv.innerHTML = '';\r\n\r\n            setExpression('');\r\n        }\r\n\r\n        if (item.action === BTN_ACTIONS.CALC) {\r\n            if (expression.trim().length <= 0) return;\r\n\r\n            expDiv.parentNode.querySelector('div:last-child').remove();\r\n\r\n            const cloneNode = expDiv.cloneNode(true);\r\n            expDiv.parentNode.appendChild(cloneNode);\r\n\r\n            const transform = `translateY(${-(expDiv.offsetHeight + 10) + 'px'}) scale(0.4)`;\r\n\r\n            try {\r\n                let res = eval(expression);\r\n\r\n                setExpression(res.toString());\r\n                setTimeout(() => {\r\n                    cloneNode.style.transform = transform;\r\n                    expDiv.innerHTML = '';\r\n                    addAnimSpan(Math.floor(res * 100000000) / 100000000);\r\n                }, 200);\r\n            } catch {\r\n                setTimeout(() => {\r\n                    cloneNode.style.transform = transform;\r\n                    cloneNode.innerHTML = 'Syntax err';\r\n                }, 200);\r\n            } finally {\r\n                console.log('calc complete');\r\n            }\r\n        }\r\n    }\r\n\r\n    const addAnimSpan = (content) => {\r\n        const expDiv = expRef.current;\r\n        const span = document.createElement('span');\r\n\r\n        span.innerHTML = content;\r\n        span.style.opacity = '0';\r\n        expDiv.appendChild(span);\r\n\r\n        const width = span.offsetWidth + 'px';\r\n        span.style.width = '0';\r\n\r\n        setTimeout(() => {\r\n            span.style.opacity = '1';\r\n            span.style.width = width;\r\n        }, 100);\r\n    }\r\n\r\n    return (\r\n        <div className=\"calculator\">\r\n            <div className=\"calculator__result\">\r\n                <div ref={expRef} className=\"calculator__result__exp\"></div>\r\n                <div className=\"calculator__result__exp\"></div>\r\n            </div>\r\n            <div ref={btnsRef} className=\"calculator__btns\">\r\n                {\r\n                    btns.map((item, index) => (\r\n                        <button\r\n                            key={index}\r\n                            className={item.class}\r\n                            onClick={() => btnClick(item)}\r\n                        >\r\n                            {item.display}\r\n                        </button>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Calculator;","C:\\Users\\16479\\Desktop\\Web Development\\CalculatorV2\\calculator\\src\\components\\calculator\\btnConfig.js",[],[],{"ruleId":"24","severity":1,"message":"25","line":49,"column":27,"nodeType":"26","messageId":"27","endLine":49,"endColumn":31},"no-eval","eval can be harmful.","CallExpression","unexpected"]